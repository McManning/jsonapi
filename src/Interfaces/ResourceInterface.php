<?php

namespace McManning\JsonApi\Interfaces;

use McManning\JsonApi\AuthorizationRequest;
use McManning\JsonApi\RelationshipCollection;

/**
 * Methods utilized by the JsonApiController for interacting with API resources.
 *
 * Resource instances do **not** need to implement this interface
 * (to support cases where they cannot, such as Propel ORM models).
 * This interface is not directly typehinted within the API codebase.
 *
 * If you write your own Non-Propel resources, it is **strongly recommended**
 * that you explicitly implement the interface below as the methods defined
 * by this interface are expected by the JsonApiController.
 */
interface ResourceInterface
{
    /**
     * Retrieve the `id` field for the JSON:API resource identifier
     *
     * @return string
     */
    public function getJsonApiId(): string;

    /**
     * Retrieve the `type` field for the JSON:API resource identifier
     *
     * @return string
     */
    public function getJsonApiType(): string;

    /**
     * Update specified resource attributes to their new values
     *
     * @param array $attributes Hashmap of a subset of attributes to update
     *
     * @return void
     */
    public function fromJsonApiAttributes(array $attributes);

    /**
     * Retrieve the `attributes` field for this JSON:API resource
     *
     * @param string[] $fieldset If supplied, this method MUST ONLY return attribute
     *                           keys that are in the value set of this array.
     *
     * @return array Hashmap of attribute keys to values
     */
    public function toJsonApiAttributes(array $fieldset = null): array;

    /**
     * Validate that the input request is authorized to perform the requested action
     *
     * If the request cannot be fulfilled, an `AuthorizationRequestException` MUST be thrown.
     *
     * @param AuthorizationRequest $request
     *
     * @throws McManning\JsonApi\Exception\AuthorizationRequestException
     *
     * @return void
     */
    public function testAuthorizationRequest(AuthorizationRequest $request);

    /**
     * Retrieve information about resource relationships.
     *
     * @return RelationshipCollection
     */
    public function getRelationships(): RelationshipCollection;

    /**
     * Retrieve the `links` field for this JSON:API resource.
     *
     * This is for custom (external) links. The `self` and `related` links will
     * be automatically generated by the controller serving up the endpoints.
     *
     * @return array Hashmap between link name and a URI.
     *               `self` and `related` keys will be ignored.
     */
    public function getJsonApiLinks(): array;

    /**
     * Persist changes to this resource to the backend storage solution.
     *
     * @return void
     */
    public function save();

    /**
     * Delete this resource from the backend storage solution.
     *
     * Once a resource has been deleted, future requests to retrieve
     * it via GET /:type/:id or any relationship methods MUST fail.
     *
     * @return void
     */
    public function delete();

    // --------------------------------------------------------------
    // For each to-many relationship returned by getRelationships(),
    // the following method signatures are expected.
    // (replace `Foos` with your relationship name)
    // --------------------------------------------------------------

    /**
     * Replace all `Foo` resources in the `foos` relationship.
     *
     * Future API calls to retrieve related resources MUST ONLY
     * include the `Foo` resources that were set by this method.
     *
     * @param Foo[] $foos Iterable list of Foo resources to add
     *
     * @return void
     */
    // public function setFoos(iterator $foos);

    /**
     * Add new `Foo` resources to the `foos` relationship.
     *
     * Future API calls to retrieve related resources MUST
     * include the `Foo` resources that were added.
     *
     * Duplicates of `Foo` resources that are already related but
     * specified in the iterator MUST be ignored.
     *
     * @param Foo[] $foos Iterable list of Foo resources to add
     *
     * @return void
     */
    // public function addFoos(iterator $foos);

    /**
     * Remove `Foo` resources from the `foos` relationship.
     *
     * Future API calls to retrieve related resources MUST NOT
     * include the `Foo` resources that were removed.
     *
     * TODO: Exception if removing one that isn't related?
     * May not be possible though due to how JsonApiController is written.
     *
     * @param Foo[] $foos Iterable list of Foo resources to remove
     *
     * @return void
     */
    // public function removeFoos(iterator $foos);

    // --------------------------------------------------------------
    // For each to-one relationship returned by getRelationships(),
    // the following method signatures are expected.
    // (replace `Fizz` with your relationship name)
    // --------------------------------------------------------------

    /**
     * Set the related `Fizz` resource in the `fizz` relationship.
     *
     * Future API calls to retrieve related resources MUST ONLY
     * include the `Fizz` resource that was set by this method.
     *
     * @param Fizz $fizz Fizz resource to add
     *
     * @return void
     */
    // public function setFizz(Fizz $fizz);

    /**
     * Get the related `Fizz` resource in the `fizz` relationship.
     *
     * If there is no related `Fizz` resource, this MUST return null.
     *
     * @return Fizz|null
     */
    // public function getFizz(): ?Fizz;
}
